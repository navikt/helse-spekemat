package no.nav.helse.spekemat.foredler

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.plugins.*
import io.ktor.server.plugins.callid.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import no.nav.helse.spekemat.fabrikk.*
import java.util.UUID

fun Route.api(p√∏lsetjeneste: P√∏lsetjeneste) {
    route("/api/person") {
        post {
            val request = call.receiveNullable<OpprettRequest>() ?: return@post call.respond(HttpStatusCode.BadRequest, FeilResponse(
                feilmelding = "Ugyldig request",
                callId = call.callId
            ))
            val callId = call.callId ?: throw BadRequestException("Mangler callId-header")
            p√∏lsetjeneste.opprettManglendePerson(request.fnr, callId)
            call.respondText(ContentType.Application.Json, HttpStatusCode.OK) { """{ "melding": "takk for ditt bidrag" }""" }
        }
        delete {
            val request = call.receiveNullable<SlettRequest>() ?: return@delete call.respond(HttpStatusCode.BadRequest, FeilResponse(
                feilmelding = "Ugyldig request",
                callId = call.callId
            ))
            p√∏lsetjeneste.slett(request.fnr)
            call.respondText(ContentType.Application.Json, HttpStatusCode.OK) { """{ "melding": "takk for ditt bidrag" }""" }
        }
    }

    route("/api/p√∏lse") {
        post {
            val request = call.receiveNullable<NyP√∏lseRequest>() ?: return@post call.respond(HttpStatusCode.BadRequest, FeilResponse(
                feilmelding = "Ugyldig request",
                callId = call.callId
            ))
            val p√∏lse = P√∏lseDto(
                vedtaksperiodeId = request.p√∏lse.vedtaksperiodeId,
                behandlingId = request.p√∏lse.behandlingId,
                status = P√∏lsestatus.√ÖPEN,
                kilde = request.p√∏lse.kilde
            )
            val callId = call.callId ?: throw BadRequestException("Mangler callId-header")
            p√∏lsetjeneste.nyP√∏lse(
                request.fnr,
                request.yrkesaktivitetidentifikator,
                p√∏lse,
                request.meldingsreferanseId,
                request.hendelsedata,
                callId
            )
            call.respondText(ContentType.Application.Json, HttpStatusCode.OK) { """{ "melding": "takk for ditt bidrag" }""" }
        }

        patch {
            val request = call.receiveNullable<OppdaterP√∏lseRequest>() ?: return@patch call.respond(HttpStatusCode.BadRequest, FeilResponse(
                feilmelding = "Ugyldig request",
                callId = call.callId
            ))
            val status = when (request.status) {
                P√∏lsestatusDto.√ÖPEN -> P√∏lsestatus.√ÖPEN
                P√∏lsestatusDto.LUKKET -> P√∏lsestatus.LUKKET
                P√∏lsestatusDto.FORKASTET -> P√∏lsestatus.FORKASTET
            }
            val callId = call.callId ?: throw BadRequestException("Mangler callId-header")
            try {
                p√∏lsetjeneste.oppdaterP√∏lse(
                    request.fnr,
                    request.yrkesaktivitetidentifikator,
                    request.vedtaksperiodeId,
                    request.behandlingId,
                    status,
                    request.meldingsreferanseId,
                    request.hendelsedata,
                    callId
                )
                call.respondText(ContentType.Application.Json, HttpStatusCode.OK) { """{ "melding": "takk for ditt bidrag" }""" }
            } catch (err: OppdatererEldreBehandlingException) {
                call.respondText(ContentType.Application.Json, HttpStatusCode.OK) { """{ "melding": "takk for ditt bidrag, men jeg tror du er litt out-of-order? Endringen er allerede hensyntatt üòö" }""" }
            } catch (err: TomP√∏lsepakkeException) {
                throw NotFoundException("Ingen registrert p√∏lsepakke for vedkommende: ${err.message}")
            } catch (err: P√∏lseFinnesIkkeException) {
                throw NotFoundException("P√∏lse finnes ikke: ${err.message}")
            }
        }
    }

    post("/api/p√∏lser") {
        val request = call.receiveNullable<P√∏lserRequest>() ?: return@post call.respond(HttpStatusCode.BadRequest, FeilResponse(
            feilmelding = "Ugyldig request",
            callId = call.callId
        ))
        call.respond(HttpStatusCode.OK, P√∏lserResponse(p√∏lsetjeneste.hent(request.fnr)))
    }
}

data class OpprettRequest(val fnr: String)
data class SlettRequest(val fnr: String)
data class P√∏lserRequest(val fnr: String)
data class P√∏lserResponse(val yrkesaktiviteter: List<YrkesaktivitetDto>)
data class NyP√∏lseRequest(
    val fnr: String,
    val yrkesaktivitetidentifikator: String,
    val p√∏lse: NyP√∏lseDto,
    val meldingsreferanseId: UUID,
    val hendelsedata: String
)
data class NyP√∏lseDto(
    val vedtaksperiodeId: UUID,
    val behandlingId: UUID,
    // tingen som gjorde at behandlingen ble opprettet
    val kilde: UUID
)
enum class P√∏lsestatusDto { √ÖPEN, LUKKET, FORKASTET }
data class OppdaterP√∏lseRequest(
    val fnr: String,
    val yrkesaktivitetidentifikator: String,
    val vedtaksperiodeId: UUID,
    val behandlingId: UUID,
    val status: P√∏lsestatusDto,
    val meldingsreferanseId: UUID,
    val hendelsedata: String
)

data class YrkesaktivitetDto(
    val yrkesaktivitetidentifikator: String,
    val rader: List<P√∏lseradDto>
)